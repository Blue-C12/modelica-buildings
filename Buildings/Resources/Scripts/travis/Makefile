############################################################
# Makefile for the regression tests that are run on travis
############################################################
ROOT = ../../../..

<<<<<<< HEAD
test-documentation:
	(cd $(ROOT)/Buildings; ../bin/runUnitTests.py --validate-html-only)
	(cd $(ROOT)/Buildings/Resources/Documentation/userGuide; make regressiontest)
	(cd $(ROOT)/Buildings/Resources/src/fluid/heatpumps/calibration/doc; make regressiontest)

test-experiment-setup:
	(cd $(ROOT)/Buildings; ../bin/runUnitTests.py --validate-experiment-setup)

test-autogenerated-files:
	#echo ### Check for package.order to be up to date
	(cd  $(ROOT)/Buildings; \
	  python -c 'import buildingspy.development.refactor as r; \
	  r.write_package_order(".", recursive=True)'; \
	  git diff --exit-code . )

	#echo ### Verify that all OpenModelica scripts are up to date, and no old scripts exist
	(cd  $(ROOT)/Buildings && \
	  rm Resources/Scripts/OpenModelica/compareVars/*.mos && \
	  python -c 'import buildingspy.development.regressiontest as u; \
	  u.Tester().writeOpenModelicaResultDictionary()')
	git status --porcelain $(ROOT)/Buildings/Resources/Scripts/OpenModelica;
	test -z "$$(git status --porcelain $(ROOT)/Buildings/Resources/Scripts/OpenModelica)"

	#echo ### Check for UnitConversion package to be consistent with the script that generates it
	(cd  $(ROOT); \
	  python Buildings/Resources/src/Controls/OBC/UnitConversions/unit_converters.py; \
	  git diff --exit-code Buildings)

test-verify-files:
	(cd $(ROOT)/Buildings && ../bin/verifyFiles.py)

=======
>>>>>>> master
# Test whether all EnergyPlus validation files are up to date.
# This targets searches all files `run.sh` and executes them.
# The target below excludes run.sh in ThermalZones as they are using a more recent
# version of EnergyPlus that has not yet been released.
test-energyplus-validations:
<<<<<<< HEAD
	export PATH=$(ROOT)/ENERGYPLUS_VERSION:$(PATH)
	(cd $(ROOT)/Buildings/Resources/Data && \
	for ff in `find . -name run.sh`; do; \
	(echo "*** Testing $ff" && cd `dirname $ff` && ./run.sh);
	done; \
	cd $(ROOT)/Buildings/Resources/Data && \
	git diff --exit-code .)
=======
	@find $(ROOT)/Buildings/Resources/Data -name run.sh | xargs -I {} sh -c \
	  'cd `dirname {}` && \
	   echo "*********************************************************" && \
	   echo "*** Testing `pwd`/run.sh" && \
	   ./run.sh'
	@echo "*** Verify that all files in repository are up to date"
	git diff --exit-code $(ROOT)/Buildings/Resources/Data

test-cdl-conformance:
	(cd $(ROOT) && \
	 echo "*********************************************************" && \
	 echo "*** Running modelica-json" && \
	 export MODELICAPATH=`pwd` && \
	 node $(MODELICA_JSON_HOME)/app.js -f Buildings/Controls/OBC -o json -m modelica -d out --strict true && \
	 rm -rf out)

test-bestest:
	@echo "*** Check if BESTEST results are up to date"
	(cd  $(ROOT)/Buildings && \
	  rm -rf Resources/Data/BoundaryConditions/Validation/BESTEST/results && \
	  python3 Resources/Data/BoundaryConditions/Validation/BESTEST/generateResults.py -c )
	git status --porcelain $(ROOT)/Buildings/Resources/Data/BoundaryConditions/Validation/BESTEST
	git diff --exit-code $(ROOT)/Buildings/Resources/Data/BoundaryConditions/Validation/BESTEST

test-spawn-portability:
	@echo "*** Check if Spawn works if the root folder is not Buildings"
	(cd  "$(ROOT)" && \
	  mv Buildings "Buildings 8.0.0" && \
	  echo "within ;" > SpawnTest.mo && \
	  echo "model SpawnTest" >> SpawnTest.mo && \
	  echo "  extends" >> SpawnTest.mo && \
	  echo "    Buildings.ThermalZones.EnergyPlus.Examples.SingleFamilyHouse.Unconditioned;" >> SpawnTest.mo && \
	  echo "end SpawnTest;" >> SpawnTest.mo && \
	  echo "simulateModel(\"SpawnTest\", stopTime=432000, method=\"Cvode\", tolerance=1e-06);" > run.mos && \
	  echo "exit()" >> run.mos && \
	  rm -f dslog.txt && \
	  dymola run.mos && \
	  mv "Buildings 8.0.0" Buildings && \
	  grep "terminated successfully" dslog.txt )

test-omc:
	(cd $(ROOT) && $(TRAVIS_BUILD_DIR)/Buildings/Resources/Scripts/travis/omc/testOpenModelica.sh)
>>>>>>> master

test-dymola:
	(cd $(ROOT)/Buildings && \
	  python ../bin/runUnitTests.py --batch --single-package $(PACKAGE) --tool dymola)

test-optimica:
	(cd $(ROOT)/Buildings && \
	  export PYTHONPATH=$(TRAVIS_BUILD_DIR)/Buildings/Resources/Python-Sources && \
	  python ../bin/runUnitTests.py --batch --single-package $(PACKAGE) --tool optimica --skip-verification)

test-jmodelica:
	(cd $(ROOT)/Buildings && \
	  export PYTHONPATH=$(TRAVIS_BUILD_DIR)/Buildings/Resources/Python-Sources && \
	  python ../bin/runUnitTests.py --batch --single-package $(PACKAGE) --tool jmodelica --skip-verification)
