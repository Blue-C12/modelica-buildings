simulateModel("Buildings.Fluid.HydronicConfigurations.Examples.ControlValves.ThreeWayOpenLoop", stopTime=100, tolerance=1e-06, resultFile="ThreeWayOpenLoop");

nPoints = readTrajectorySize("TwoWayOpenLoop.mat");
componentNames = {"valAut100", "valAut75", "valAut50", "valAut33", "valAut25", "valAut50Ove", "valAut50Bal", "valAut50Ter10"};
ope = readTrajectory("ThreeWayOpenLoop.mat", {"ope.y"}, nPoints);
m_flow_nominal = readTrajectory("ThreeWayOpenLoop.mat", {"mLiq_flow_nominal"}, nPoints);

createPlot(id=1, position={15, 15, 1184, 744}, x="ope.y", y={"valAut100.res1.m_flow", "valAut75.res1.m_flow", "valAut50.res1.m_flow", "valAut33.res1.m_flow", "valAut25.res1.m_flow", "valAut50Ove.res1.m_flow", "valAut50Bal.res1.m_flow", "valAut50Ter10.res1.m_flow"}, erase=true, autoscale=true, grid=true, color=true);

createPlot(id=11, position={148, 342, 1184, 744}, x="ope.y", leftTitle="Total flow rate [kg/s]", autoscale=true, grid=true, erase=true, color=true);
varNames = {c + ".res2.m_flow" for c in componentNames}
m2_flow = readTrajectory("ThreeWayOpenLoop.mat", varNames, nPoints);
for i in 1:(size(componentNames))[1] loop
  plotArray(ope[1], -1 * m2_flow[i], id=11, erase=false, legend=componentNames[i]);
end for;

createPlot(id=2, position={1214, 15, 1184, 744}, x="ope.y", y={"valAut100.res1.dp", "valAut75.res1.dp", "valAut50.res1.dp", "valAut33.res1.dp", "valAut25.res1.dp", "valAut50Ove.res1.dp", "valAut50Bal.res1.dp", "valAut50Ter10.res1.dp"}, range={0.0, 1.0, 0.0, 2E5}, erase=true, grid=true, color=true);

varNames = {c + ".res1.m_flow" for c in componentNames}
m1_flow = readTrajectory("ThreeWayOpenLoop.mat", varNames, nPoints);
varNames = {c + ".res1.dp" for c in componentNames}
dpDir = readTrajectory("ThreeWayOpenLoop.mat", varNames, nPoints);
varNames = {c + ".res3.dp" for c in componentNames}
dpByp = readTrajectory("ThreeWayOpenLoop.mat", varNames, nPoints);

createPlot(id=3, position={1349, 343, 1184, 744}, x="ope.y", leftTitle="res1.m_flow(y)/res1.m_flow(100%)", autoscale=true, grid=true, erase=true, color=true);
for i in 1:(size(componentNames))[1] loop
  plotArray(ope[1], m1_flow[i] / m1_flow[i, end], id=3, erase=false, legend=componentNames[i]);
end for;

for i in 1:(size(componentNames))[1] loop
  beta := dpDir[i, end] / dpByp[i, end];
  y100_y0 := dpDir[i, end] / dpDir[i, 1]; // beta / (abs(m2_flow[i, end]) / m_flow_nominal[1, 1])^2;
  Modelica.Utilities.Streams.print("Component " + componentNames[i] + ": Beta = " + String(beta) + "\tdp(y=100%)/dp(y=0%) = " + String(y100_y0));
end for;
